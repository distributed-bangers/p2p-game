version: '3.1'
networks:
  userservice:
    driver: bridge
  gameservice:
    driver: bridge
  db:
    driver: bridge
  redis_userservice:
    driver: bridge
  ufront:
    driver: bridge
  gfront:
    driver: bridge
volumes:
  user_mongodb_data:
  user_mongodb_configdata:
  game_mongodb_data:
  game_mongodb_configdata:
  redis_data:

services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    depends_on:
      - gameservice
      - userservice
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - '5173:80'
    networks:
      - ufront
      - gfront

  userservice:
    container_name: userservice
    build:
      context: ./userservice/
      dockerfile: Dockerfile
    depends_on:
      - redis
      - usermongo
    volumes:
      - .:/src
    ports:
      - '3000:8080'
    command: npm start
    environment:
      NODE_ENV: production
      NODE_CONFIG_DIR: ./src/config/
    networks:
      - userservice
      - redis_userservice
      - ufront

  gameservice:
    container_name: gameservice
    build:
      context: ./gameservice/
      dockerfile: Dockerfile
    depends_on:
      - gamemongo
    volumes:
      - .:/src
    ports:
      - '3001:8080'
    command: npm start
    environment:
      NODE_ENV: production
      NODE_CONFIG_DIR: ./src/config/
    networks:
      - gameservice
      - gfront

  usermongo:
    container_name: usermongo
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - db
      - userservice
    volumes:
      - user_mongodb_data:/data/db
      - user_mongodb_configdata:/data/configdb
      - ./mongo-init-users.js:/docker-entrypoint-initdb.d/mongo-init-users.js:ro

  gamemongo:
    container_name: gamemongo
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - db
      - gameservice
    volumes:
      - game_mongodb_data:/data/db
      - game_mongodb_configdata:/data/configdb
      - ./mongo-init-games.js:/docker-entrypoint-initdb.d/mongo-init-games.js:ro

  usermongo-express:
    container_name: usermongo-express
    image: mongo-express:latest
    restart: always
    ports:
      - '8081:8081'
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://root:example@usermongo:27017
    depends_on:
      - usermongo
    networks:
      - db

  gamemongo-express:
    container_name: gamemongo-express
    image: mongo-express:latest
    restart: always
    ports:
      - '8082:8081'
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://root:example@gamemongo:27017
    depends_on:
      - gamemongo
    networks:
      - db

  peerserver:
    container_name: peerserver
    image: peerjs/peerjs-server:latest
    ports:
      - '9000:9000'

  redis:
    container_name: redis
    restart: always
    image: redis:alpine
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - redis_userservice
